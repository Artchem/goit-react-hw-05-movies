{"version":3,"file":"static/js/145.a052074c.chunk.js","mappings":"oOAAQA,EAAaC,EAAQ,KAArBD,SA0CR,MAxCA,YAAmC,IAAbE,EAAY,EAAZA,SACpB,EAAoCF,EAAS,IAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KAgBMC,EAAY,WAChBD,EAAc,GACf,EAED,OACE,6BACE,kBACEE,SArBe,SAAAC,GAEnBH,EAAcG,EAAIC,OAAOC,MAAMC,cAChC,EAmBKD,MAAON,EACPQ,KAAK,aACLC,KAAK,OAGLC,YAAY,mBAEd,mBAAQD,KAAK,SAASE,QAxBL,SAAAP,GACnBA,EAAIQ,iBACsB,KAAtBZ,EAAWa,SAIfd,EAASC,GACTE,IACD,EAgBG,UAEE,yCAIP,E,mCCkCD,MArEA,WAAmB,IAAD,EAChB,GAAwCL,EAAAA,EAAAA,UAAS,MAAjD,eAAOiB,EAAP,KAAqBC,EAArB,KAEA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAK,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GACrCC,GAAWC,EAAAA,EAAAA,MA8CjB,OA7CAC,QAAQC,IAAI,oBAAqBP,GACjCM,QAAQC,IAAI,aAAcL,IAE1BM,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAGuBC,EAAAA,EAAAA,GAAiB,GAAD,OAAIP,IAH3C,OAGUQ,EAHV,OAMIZ,EAAgBY,EAAKC,SACrBL,QAAQC,IAAI,oBAAqBG,EAAKC,SAP1C,sJADc,uBAAC,WAAD,wBAgBdC,EACD,GAAE,CAACV,IAuBJI,QAAQC,IAAI,sBAAuBH,IAGjC,iCACE,SAAC,EAAD,CAAYtB,SAbS,SAAAoB,GACvBI,QAAQC,IAAIL,GACZD,EAAgB,CAAEC,MAAOA,GAK1B,IAOIL,IACC,wBACGA,EAAagB,KAAI,SAAAC,GAAK,OACrB,yBACE,UAAC,KAAD,CAAMC,GAAE,UAAKD,EAAME,IAAMC,MAAO,CAAEC,KAAMd,GAAxC,UACGU,EAAMK,MACNL,EAAMvB,SAHFuB,EAAME,GADM,QAYhC,C,qHC7DM,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA0BlB,GAA1B,yFACcmB,EAAAA,EAAAA,IAAA,UACdnB,EADc,8CADd,cACCoB,EADD,OAICZ,EAAOY,EAAKZ,KAJb,kBAMEA,GANF,kEASA,SAAeD,EAAtB,+CAAO,OAAP,oBAAO,WAAgCP,GAAhC,yFACcmB,EAAAA,EAAAA,IAAA,6BACKnB,EADL,8CADd,cACCoB,EADD,OAICZ,EAAOY,EAAKZ,KAJb,kBAMEA,GANF,kEAnBPW,EAAAA,EAAAA,SAAAA,QAAyB,+B","sources":["components/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx","services/api-themovie.js"],"sourcesContent":["const { useState } = require('react');\n\nfunction SearchForm({ onSubmit }) {\n  const [searchText, setSearchText] = useState('');\n\n  const handleChange = evt => {\n    // console.log(evt);\n    setSearchText(evt.target.value.toLowerCase());\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    if (searchText.trim() === '') {\n      //   toast.error('Enter search movies !');\n      return;\n    }\n    onSubmit(searchText);\n    resetForm();\n  };\n  const resetForm = () => {\n    setSearchText('');\n  };\n\n  return (\n    <form>\n      <input\n        onChange={handleChange}\n        value={searchText}\n        name=\"searchText\"\n        type=\"text\"\n        // autocomplete=\"off\"\n        // autofocus\n        placeholder=\"Search movies\"\n      />\n      <button type=\"submit\" onClick={handleSubmit}>\n        {/* <FaSistrix size={25} /> */}\n        <span>Search</span>\n      </button>\n    </form>\n  );\n}\n\nexport default SearchForm;\n","import SearchForm from 'components/SearchForm/SearchForm';\nimport { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { getMoviesByQuery } from 'services/api-themovie';\n\nfunction Movies() {\n  const [searchMovies, setSearchMovies] = useState(null);\n  //   const [error, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n  const location = useLocation();\n  console.log('searchParams :>> ', searchParams);\n  console.log('query :>> ', query);\n\n  useEffect(() => {\n    async function addMoviesByQuery() {\n      //   setLoading(true);\n      try {\n        const data = await getMoviesByQuery(`${query}`);\n        // console.log('data :>> ', data);\n        // setPhotos(prevState => [...prevState, ...hits]);\n        setSearchMovies(data.results);\n        console.log('searchMovies :>> ', data.results);\n      } catch (error) {\n        // setError(error.message);\n      } finally {\n        // setLoading(false);\n      }\n    }\n\n    addMoviesByQuery();\n  }, [query]);\n  // console.log('films :>> ', films);\n  // const [searchParams, setSearchParams] = useSearchParams();\n  // const query = searchParams.get('query') ?? '';\n  // console.log('searchParams :>> ', searchParams);\n  // console.log('query :>> ', query);\n\n  // const updateQueryString = evt => {\n  //   if (evt.target.value === '') {\n  //     return setSearchParams({});\n  //   }\n  //   setSearchParams({ query: evt.target.value });\n  // };\n\n  const handleFormSubmit = query => {\n    console.log(query);\n    setSearchParams({ query: query });\n    // setPage(1);\n    // setPhotos([]);\n    // setTotalPhotos(0);\n    // setError(null);\n  };\n\n  console.log('location movies:>> ', location);\n\n  return (\n    <>\n      <SearchForm onSubmit={handleFormSubmit} />\n      {searchMovies && (\n        <ul>\n          {searchMovies.map(movie => (\n            <li key={movie.id}>\n              <Link to={`${movie.id}`} state={{ from: location }}>\n                {movie.title}\n                {movie.name}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n}\nexport default Movies;\n","import axios from 'axios';\n// https://api.themoviedb.org/3/movie/popular/?api_key=\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n// axios.defaults.headers.common['key'] = '38837496-e09cca1b216ed759136fb60be';\n// const API_KEY = 'b2293c9f70e699fcb144268897e83a3f';\n// const params = {\n//   key: API_KEY,\n// image_type: 'photo',\n// orientation: 'horizontal',\n// safesearch: true,\n// per_page: 12,\n// };\nexport async function fetchMovie(query) {\n  const resp = await axios.get(\n    `${query}?api_key=b2293c9f70e699fcb144268897e83a3f`\n  );\n  const data = resp.data;\n  // console.log(data);\n  return data;\n}\n\nexport async function getMoviesByQuery(query) {\n  const resp = await axios.get(\n    `search/movie?query=${query}&api_key=b2293c9f70e699fcb144268897e83a3f`\n  );\n  const data = resp.data;\n  // console.log(data);\n  return data;\n}\n"],"names":["useState","require","onSubmit","searchText","setSearchText","resetForm","onChange","evt","target","value","toLowerCase","name","type","placeholder","onClick","preventDefault","trim","searchMovies","setSearchMovies","useSearchParams","searchParams","setSearchParams","query","get","location","useLocation","console","log","useEffect","getMoviesByQuery","data","results","addMoviesByQuery","map","movie","to","id","state","from","title","fetchMovie","axios","resp"],"sourceRoot":""}